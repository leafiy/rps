{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'GameBoard',\n  data() {\n    return {\n      items: [],\n      // 存储游戏元素\n      ctx: null,\n      // Canvas context\n      intervalId: null,\n      // 游戏循环的 interval ID,\n      scissorsImage: null,\n      rockImage: null,\n      paperImage: null,\n      gameStartTime: null,\n      gameDuration: 0\n    };\n  },\n  computed: {\n    scissorsCount() {\n      return this.items.filter(item => item.type === 'scissors').length;\n    },\n    rockCount() {\n      return this.items.filter(item => item.type === 'rock').length;\n    },\n    paperCount() {\n      return this.items.filter(item => item.type === 'paper').length;\n    }\n  },\n  methods: {\n    loadImages() {\n      this.scissorsImage = new Image();\n      this.scissorsImage.src = require('@/assets/scissors.svg');\n      this.rockImage = new Image();\n      this.rockImage.src = require('@/assets/rock.svg');\n      this.paperImage = new Image();\n      this.paperImage.src = require('@/assets/paper.svg');\n    },\n    startGame() {\n      this.initItems(); // 初始化游戏元素\n      this.intervalId = setInterval(this.gameLoop, 100);\n      this.gameStartTime = Date.now();\n      this.updateGameDuration();\n    },\n    updateGameDuration() {\n      if (this.gameStartTime) {\n        this.gameDuration = Math.floor((Date.now() - this.gameStartTime) / 1000);\n      }\n    },\n    initItems() {\n      this.items = []; // 清空之前的游戏元素\n\n      // 生成 10 个剪刀、石头、布\n      for (let i = 0; i < 20; i++) {\n        this.items.push(this.createItem('scissors'));\n        this.items.push(this.createItem('rock'));\n        this.items.push(this.createItem('paper'));\n      }\n    },\n    createItem(type) {\n      return {\n        type: type,\n        // 'scissors', 'rock', or 'paper'\n        x: Math.random() * 600,\n        // 随机 x 位置\n        y: Math.random() * 400,\n        // 随机 y 位置\n        vx: (Math.random() - 0.5) * 15,\n        // 随机 x 方向速度\n        vy: (Math.random() - 0.5) * 15 // 随机 y 方向速度\n      };\n    },\n    gameLoop() {\n      this.updateGameDuration();\n      // 清空画布\n      this.ctx.clearRect(0, 0, 600, 400);\n\n      // 更新和绘制每个游戏元素\n      this.items.forEach(item => {\n        // 更新位置\n        item.x += item.vx;\n        item.y += item.vy;\n\n        // 处理边界碰撞\n        if (item.x < 0 || item.x > 600) item.vx = -item.vx;\n        if (item.y < 0 || item.y > 400) item.vy = -item.vy;\n\n        // 绘制元素\n        this.drawItem(item);\n      });\n\n      // 检查相互之间的碰撞并更新状态\n      this.checkCollisions();\n\n      // 检查游戏结束条件\n      this.checkGameOver();\n    },\n    drawItem(item) {\n      this.ctx.fillStyle = this.getItemColor(item.type); // 设置填充颜色\n      let image;\n      switch (item.type) {\n        case 'scissors':\n          image = this.scissorsImage;\n          break;\n        case 'rock':\n          image = this.rockImage;\n          break;\n        case 'paper':\n          image = this.paperImage;\n          break;\n      }\n      if (image) {\n        // 假设图标大小为 40x40\n        this.ctx.drawImage(image, item.x - 10, item.y - 10, 10, 10);\n      }\n    },\n    getItemColor(type) {\n      // 根据类型返回不同的颜色\n      switch (type) {\n        case 'rock':\n          return 'gray';\n        case 'paper':\n          return 'red';\n        case 'scissors':\n          return 'orange';\n      }\n    },\n    checkCollisions() {\n      const size = 10; // 假设每个元素的大小相同\n      for (let i = 0; i < this.items.length; i++) {\n        for (let j = i + 1; j < this.items.length; j++) {\n          const item1 = this.items[i];\n          const item2 = this.items[j];\n\n          // 计算两个元素之间的距离\n          const dx = item1.x - item2.x;\n          const dy = item1.y - item2.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          // 检查是否发生碰撞\n          if (distance < size) {\n            // 碰撞发生，根据游戏规则处理\n            this.resolveCollision(item1, item2);\n          }\n        }\n      }\n    },\n    resolveCollision(item1, item2) {\n      // 基于剪刀、石头、布的规则更新状态\n      if (item1.type === 'scissors' && item2.type === 'paper' || item1.type === 'paper' && item2.type === 'scissors') {\n        item1.type = item2.type = 'scissors';\n      } else if (item1.type === 'paper' && item2.type === 'rock' || item1.type === 'rock' && item2.type === 'paper') {\n        item1.type = item2.type = 'paper';\n      } else if (item1.type === 'rock' && item2.type === 'scissors' || item1.type === 'scissors' && item2.type === 'rock') {\n        item1.type = item2.type = 'rock';\n      }\n      this.randomizeDirection(item1);\n      this.randomizeDirection(item2);\n    },\n    randomizeDirection(item) {\n      const angle = Math.random() * Math.PI * 2; // 随机角度\n      const speed = Math.sqrt(item.vx * item.vx + item.vy * item.vy); // 保持速度不变\n      item.vx = Math.cos(angle) * speed;\n      item.vy = Math.sin(angle) * speed;\n    },\n    checkGameOver() {\n      if (this.items.length === 0) {\n        return; // 没有元素，直接返回\n      }\n      const firstType = this.items[0].type;\n      const isGameOver = this.items.every(item => item.type === firstType);\n      if (isGameOver) {\n        clearInterval(this.intervalId); // 停止游戏循环\n        alert(`游戏结束，胜利者：${firstType}`); // 弹出胜利者信息\n        // 可以在这里添加其他游戏结束后的逻辑\n      }\n    }\n  },\n  mounted() {\n    const canvas = this.$refs.canvas;\n    this.ctx = canvas.getContext('2d');\n    this.loadImages();\n  }\n};","map":{"version":3,"names":["name","data","items","ctx","intervalId","scissorsImage","rockImage","paperImage","gameStartTime","gameDuration","computed","scissorsCount","filter","item","type","length","rockCount","paperCount","methods","loadImages","Image","src","require","startGame","initItems","setInterval","gameLoop","Date","now","updateGameDuration","Math","floor","i","push","createItem","x","random","y","vx","vy","clearRect","forEach","drawItem","checkCollisions","checkGameOver","fillStyle","getItemColor","image","drawImage","size","j","item1","item2","dx","dy","distance","sqrt","resolveCollision","randomizeDirection","angle","PI","speed","cos","sin","firstType","isGameOver","every","clearInterval","alert","mounted","canvas","$refs","getContext"],"sources":["src/components/GameBoard.vue"],"sourcesContent":["<template>\n    <div>\n        <canvas ref=\"canvas\" class=\"game-canvas\" width=\"600\" height=\"400\"></canvas>\n        <div class=\"status\">\n            <p>游戏时长: {{ gameDuration }} 秒</p>\n            <p>剪刀: {{ scissorsCount }}</p>\n            <p>石头: {{ rockCount }}</p>\n            <p>布: {{ paperCount }}</p>\n        </div>\n        <button @click=\"startGame\">Start</button>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'GameBoard',\n    data() {\n        return {\n            items: [], // 存储游戏元素\n            ctx: null, // Canvas context\n            intervalId: null, // 游戏循环的 interval ID,\n            scissorsImage: null,\n            rockImage: null,\n            paperImage: null,\n            gameStartTime: null,\n            gameDuration: 0,\n        };\n    },\n    computed: {\n        scissorsCount() {\n            return this.items.filter(item => item.type === 'scissors').length;\n        },\n        rockCount() {\n            return this.items.filter(item => item.type === 'rock').length;\n        },\n        paperCount() {\n            return this.items.filter(item => item.type === 'paper').length;\n        },\n    },\n    methods: {\n        loadImages() {\n            this.scissorsImage = new Image();\n            this.scissorsImage.src = require('@/assets/scissors.svg');\n\n            this.rockImage = new Image();\n            this.rockImage.src = require('@/assets/rock.svg');\n\n            this.paperImage = new Image();\n            this.paperImage.src = require('@/assets/paper.svg');\n        },\n        startGame() {\n            this.initItems(); // 初始化游戏元素\n            this.intervalId = setInterval(this.gameLoop, 100);\n            this.gameStartTime = Date.now();\n            this.updateGameDuration();\n        },\n        updateGameDuration() {\n            if (this.gameStartTime) {\n                this.gameDuration = Math.floor((Date.now() - this.gameStartTime) / 1000);\n            }\n        },\n        initItems() {\n            this.items = []; // 清空之前的游戏元素\n\n            // 生成 10 个剪刀、石头、布\n            for (let i = 0; i < 20; i++) {\n                this.items.push(this.createItem('scissors'));\n                this.items.push(this.createItem('rock'));\n                this.items.push(this.createItem('paper'));\n            }\n        },\n        createItem(type) {\n            return {\n                type: type, // 'scissors', 'rock', or 'paper'\n                x: Math.random() * 600, // 随机 x 位置\n                y: Math.random() * 400, // 随机 y 位置\n                vx: (Math.random() - 0.5) * 15, // 随机 x 方向速度\n                vy: (Math.random() - 0.5) * 15, // 随机 y 方向速度\n            };\n        },\n        gameLoop() {\n            this.updateGameDuration();\n            // 清空画布\n            this.ctx.clearRect(0, 0, 600, 400);\n\n            // 更新和绘制每个游戏元素\n            this.items.forEach(item => {\n                // 更新位置\n                item.x += item.vx;\n                item.y += item.vy;\n\n                // 处理边界碰撞\n                if (item.x < 0 || item.x > 600) item.vx = -item.vx;\n                if (item.y < 0 || item.y > 400) item.vy = -item.vy;\n\n                // 绘制元素\n                this.drawItem(item);\n            });\n\n            // 检查相互之间的碰撞并更新状态\n            this.checkCollisions();\n\n            // 检查游戏结束条件\n            this.checkGameOver();\n        },\n        drawItem(item) {\n            this.ctx.fillStyle = this.getItemColor(item.type); // 设置填充颜色\n            let image;\n            switch (item.type) {\n                case 'scissors':\n                    image = this.scissorsImage;\n                    break;\n                case 'rock':\n                    image = this.rockImage;\n                    break;\n                case 'paper':\n                    image = this.paperImage;\n                    break;\n            }\n            if (image) {\n                // 假设图标大小为 40x40\n                this.ctx.drawImage(image, item.x - 10, item.y - 10, 10, 10);\n\n            }\n        },\n        getItemColor(type) {\n            // 根据类型返回不同的颜色\n            switch (type) {\n                case 'rock': return 'gray';\n                case 'paper': return 'red';\n                case 'scissors': return 'orange';\n            }\n        },\n        checkCollisions() {\n            const size = 10; // 假设每个元素的大小相同\n            for (let i = 0; i < this.items.length; i++) {\n                for (let j = i + 1; j < this.items.length; j++) {\n                    const item1 = this.items[i];\n                    const item2 = this.items[j];\n\n                    // 计算两个元素之间的距离\n                    const dx = item1.x - item2.x;\n                    const dy = item1.y - item2.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n\n                    // 检查是否发生碰撞\n                    if (distance < size) {\n                        // 碰撞发生，根据游戏规则处理\n                        this.resolveCollision(item1, item2);\n                    }\n                }\n            }\n        },\n        resolveCollision(item1, item2) {\n            // 基于剪刀、石头、布的规则更新状态\n            if ((item1.type === 'scissors' && item2.type === 'paper') ||\n                (item1.type === 'paper' && item2.type === 'scissors')) {\n                item1.type = item2.type = 'scissors';\n            } else if ((item1.type === 'paper' && item2.type === 'rock') ||\n                (item1.type === 'rock' && item2.type === 'paper')) {\n                item1.type = item2.type = 'paper';\n            } else if ((item1.type === 'rock' && item2.type === 'scissors') ||\n                (item1.type === 'scissors' && item2.type === 'rock')) {\n                item1.type = item2.type = 'rock';\n            }\n            this.randomizeDirection(item1);\n            this.randomizeDirection(item2);\n\n        },\n        randomizeDirection(item) {\n            const angle = Math.random() * Math.PI * 2; // 随机角度\n            const speed = Math.sqrt(item.vx * item.vx + item.vy * item.vy); // 保持速度不变\n            item.vx = Math.cos(angle) * speed;\n            item.vy = Math.sin(angle) * speed;\n        },\n        checkGameOver() {\n            if (this.items.length === 0) {\n                return; // 没有元素，直接返回\n            }\n\n            const firstType = this.items[0].type;\n            const isGameOver = this.items.every(item => item.type === firstType);\n\n            if (isGameOver) {\n                clearInterval(this.intervalId); // 停止游戏循环\n                alert(`游戏结束，胜利者：${firstType}`); // 弹出胜利者信息\n                // 可以在这里添加其他游戏结束后的逻辑\n            }\n        },\n    },\n    mounted() {\n        const canvas = this.$refs.canvas;\n        this.ctx = canvas.getContext('2d');\n        this.loadImages();\n    }\n}\n</script>\n\n<style>\n.status {\n    margin-top: 10px;\n}\n\n.game-canvas {\n    border: 2px solid #000;\n    /* 黑色边框，你可以自定义颜色和边框宽度 */\n    /* 可以添加其他样式，如圆角等 */\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}